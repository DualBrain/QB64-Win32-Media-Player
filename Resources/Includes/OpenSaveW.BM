Type OPENFILENAME
    As _Unsigned Long lStructSize
    $If 64BIT Then
        As String * 4 padding
    $End If
    As _Offset hwndOwner, hInstance, lpstrFilter, lpstrCustomFilter
    As _Unsigned Long nMaxCustFilter, nFilterIndex
    As _Offset lpstrFile
    As _Unsigned Long nMaxFile
    $If 64BIT Then
        As String * 4 padding2
    $End If
    As _Offset lpstrFileTitle
    As _Unsigned Long nMaxFileTitle
    $If 64BIT Then
        As String * 4 padding3
    $End If
    As _Offset lpstrInitialDir, lpstrTitle
    As _Unsigned Long Flags
    As Integer nFileOffset, nFileExtension
    As _Offset lpstrDefExt, lCustData, lpfnHook, lpTemplateName, pvReserved
    As _Unsigned Long dwReserved, FlagsEx
End Type

Type BROWSEINFO
    As _Offset hwndOwner, pidlRoot, pszDisplayName, lpszTitle
    As _Unsigned Long ulFlags
    As _Offset lpfn, lParam
    As Long iImage
End Type

Declare Dynamic Library "Comdlg32"
    Sub GetSaveFileNameW (ByVal ofn As _Offset)
    Function GetOpenFileNameW& (ByVal ofn As _Offset)
    Sub GetSaveFileNameA (ByVal ofn As _Offset)
    Function GetOpenFileNameA& (ByVal ofn As _Offset)
End Declare

Declare Dynamic Library "Shell32"
    Function SHBrowseForFolderW%& (ByVal lpbi As _Offset)
    Function SHGetPathFromIDListW%% (ByVal lpItem As _Offset, Byval szDir As _Offset)
    Function SHBrowseForFolderA%& (ByVal lpbi As _Offset)
    Function SHGetPathFromIDListA%% (ByVal lpItem As _Offset, Byval szDir As _Offset)
End Declare

$If TCSLEN = UNDEFINED Then
    $Let TCSLEN = DEFINED
    $If 64BIT Then
        Declare CustomType Library ".\internal\c\c_compiler\x86_64-w64-mingw32\include\tchar"
            Function tcslen%& Alias "_tcslen" (ByVal str As _Offset)
        End Declare
    $Else
        Declare CustomType Library ".\internal\c\c_compiler\i686-w64-mingw32\include\tchar"
        Function tcslen%& Alias "_tcslen" (ByVal str As _Offset)
        End Declare
    $End If
$End If

$If WCSLEN = UNDEFINED Then
    $Let WCSLEN = DEFINED
    Declare CustomType Library
        Function wcslen%& (ByVal str As _Offset)
    End Declare
$End If

Function ComDlgFileName%& (__Title As String, InitialDir As String, Filter As String, FilterIndex As _Unsigned Long, Flags As _Unsigned Long)
    If Flags And UNICODE Then
        Flags = Flags - UNICODE
        ComDlgFileName = ComDlgFileNameW(__Title, InitialDir, Filter, FilterIndex, Flags)
    Else
        ComDlgFileName = ComDlgFileNameA(__Title, InitialDir, Filter, FilterIndex, Flags)
    End If
End Function

Function ComDlgFileNameW%& (__Title As String, InitialDir As String, Filter As String, FilterIndex As _Unsigned Long, Flags As _Unsigned Long)
    Const MAX_PATH = 65534

    Dim As OPENFILENAME ofn

    Do
        Mid$(Filter, InStr(Filter, "|")) = Chr$(0)
    Loop While InStr(Filter, "|")

    __Title = ANSIToUnicode(__Title + Chr$(0))
    InitialDir = ANSIToUnicode(InitialDir + Chr$(0))
    Filter = ANSIToUnicode(Filter + Chr$(0) + Chr$(0))
    Dim As String * MAX_PATH oFile
    ofn.lStructSize = Len(ofn)
    ofn.hwndOwner = _WindowHandle
    ofn.lpstrFilter = _Offset(Filter)
    ofn.nFilterIndex = FilterIndex
    ofn.nMaxFile = Len(oFile)
    ofn.lpstrFileTitle = ofn.lpstrFile
    ofn.nMaxFileTitle = ofn.nMaxFile
    ofn.lpstrInitialDir = _Offset(InitialDir)
    ofn.lpstrTitle = _Offset(__Title)
    ofn.lpstrFile = _Offset(oFile)
    If OPEN_DIALOG And Flags Or (SAVE_DIALOG And Flags) = 0 Then
        If OFN_ALLOWMULTISELECT And Flags Then Flags = Flags Or OFN_EXPLORER
        Flags = Flags Or OFN_HIDEREADONLY
        ofn.Flags = Flags
        If GetOpenFileNameW(_Offset(ofn)) <> 0 Then
            If OFN_ALLOWMULTISELECT And Flags Then
                Dim As String file, outfiles, directory
                Dim As _Offset tmp: tmp = ofn.lpstrFile + (ofn.nFileOffset * 2)
                Dim As _MEM pFiles: pFiles = _Mem(tmp, wcslen(tmp) * 2)
                Dim As _MEM dir: dir = _Mem(ofn.lpstrFile, wcslen(ofn.lpstrFile) * 2)
                directory = Space$(wcslen(ofn.lpstrFile) * 2)
                _MemGet dir, dir.OFFSET, directory
                _MemFree dir
                Dim As Long i
                While wcslen(tmp)
                    file = Space$(wcslen(tmp) * 2)
                    _MemGet pFiles, pFiles.OFFSET, file
                    Select Case i
                        Case 0
                            outfiles = directory + ANSIToUnicode("\") + file
                        Case Else
                            outfiles = outfiles + ANSIToUnicode("|") + directory + ANSIToUnicode("\") + file
                    End Select
                    i = i + 1
                    tmp = tmp + Len(file) + 2
                    pFiles = _Mem(tmp, wcslen(tmp) * 2)
                Wend
                _MemFree pFiles
                If i = 1 Then
                    ComDlgFileNameW = _Offset(directory)
                Else
                    ComDlgFileNameW = _Offset(outfiles)
                End If
            Else
                ComDlgFileNameW = ofn.lpstrFile
            End If
        End If
    ElseIf SAVE_DIALOG And Flags Then
        ofn.Flags = Flags
        Dim As String defaultExt: defaultExt = ANSIToUnicode(DEFEXT + Chr$(0))
        ofn.lpstrDefExt = _Offset(defaultExt)
        GetSaveFileNameW _Offset(ofn)
        ComDlgFileNameW = ofn.lpstrFile
    End If
End Function

Function ComDlgFileNameA%& (__Title As String, InitialDir As String, Filter As String, FilterIndex As _Unsigned Long, Flags As _Unsigned Long)
    Const MAX_PATH = 260

    Dim As OPENFILENAME ofn
    Do
        Mid$(Filter, InStr(Filter, "|")) = Chr$(0)
    Loop While InStr(Filter, "|")

    __Title = __Title + Chr$(0)
    InitialDir = InitialDir + Chr$(0)
    Filter = Filter + Chr$(0) + Chr$(0)
    Dim As String * MAX_PATH oFile
    ofn.lStructSize = Len(ofn)
    ofn.hwndOwner = _WindowHandle
    ofn.lpstrFilter = _Offset(Filter)
    ofn.nFilterIndex = FilterIndex
    ofn.nMaxFile = Len(oFile)
    ofn.lpstrFileTitle = ofn.lpstrFile
    ofn.nMaxFileTitle = ofn.nMaxFile
    ofn.lpstrInitialDir = _Offset(InitialDir)
    ofn.lpstrTitle = _Offset(__Title)
    ofn.lpstrFile = _Offset(oFile)
    If OPEN_DIALOG And Flags Or (SAVE_DIALOG And Flags) = 0 Then
        If OFN_ALLOWMULTISELECT And Flags Then Flags = Flags Or OFN_EXPLORER
        Flags = Flags Or OFN_HIDEREADONLY
        ofn.Flags = Flags
        If GetOpenFileNameA(_Offset(ofn)) <> 0 Then
            If OFN_ALLOWMULTISELECT And Flags Then
                Dim As String file, outfiles, directory
                Dim As _Offset tmp: tmp = ofn.lpstrFile + ofn.nFileOffset
                Dim As _MEM pFiles: pFiles = _Mem(tmp, tcslen(tmp))
                Dim As _MEM dir: dir = _Mem(ofn.lpstrFile, tcslen(ofn.lpstrFile))
                directory = Space$(tcslen(ofn.lpstrFile))
                _MemGet dir, dir.OFFSET, directory
                _MemFree dir
                Dim As Long i
                While tcslen(tmp)
                    file = Space$(tcslen(tmp))
                    _MemGet pFiles, pFiles.OFFSET, file
                    Select Case i
                        Case 0
                            outfiles = directory + "\" + file
                        Case Else
                            outfiles = outfiles + "|" + directory + "\" + file
                    End Select
                    i = i + 1
                    tmp = tmp + (tcslen(tmp) + 1)
                    pFiles = _Mem(tmp, tcslen(tmp))
                Wend
                _MemFree pFiles
                If i = 1 Then
                    file = directory
                    ComDlgFileNameA = _Offset(file)
                Else
                    ComDlgFileNameA = _Offset(outfiles)
                End If
            Else
                ComDlgFileNameA = ofn.lpstrFile
            End If
        End If
    ElseIf SAVE_DIALOG And Flags Then
        ofn.Flags = Flags
        Dim As String defaultExt: defaultExt = DEFEXT + Chr$(0)
        ofn.lpstrDefExt = _Offset(defaultExt)
        GetSaveFileNameA _Offset(ofn)
        ComDlgFileNameA = ofn.lpstrFile
    End If
End Function

Function SelectFolder%& (__Title As String, Flag As _Unsigned Long)
    If Flag = UNICODE Then
        SelectFolder = SelectFolderW(__Title)
    Else
        SelectFolder = SelectFolderA(__Title)
    End If
End Function

Function SelectFolderW%& (__Title As String)
    Const MAX_PATH = 65534
    Dim As BROWSEINFO browse
    Dim As String * MAX_PATH folder
    __Title = ANSIToUnicode(__Title + Chr$(0))
    browse.hwndOwner = _WindowHandle
    browse.pszDisplayName = _Offset(folder)
    browse.lpszTitle = _Offset(__Title)
    Dim As _Offset pFolder
    pFolder = SHBrowseForFolderW(_Offset(browse))
    If pFolder Then
        Dim As String * MAX_PATH resolvedPath
        If SHGetPathFromIDListW(pFolder, _Offset(resolvedPath)) Then
            SelectFolderW = _Offset(resolvedPath)
        End If
    End If
End Function

Function SelectFolderA%& (__Title As String)
    Const MAX_PATH = 260
    Dim As BROWSEINFO browse
    Dim As String * MAX_PATH folder
    __Title = __Title + Chr$(0)
    browse.hwndOwner = _WindowHandle
    browse.pszDisplayName = _Offset(folder)
    browse.lpszTitle = _Offset(__Title)
    Dim As _Offset pfolder
    pfolder = SHBrowseForFolderA(_Offset(browse))
    If pfolder Then
        Dim As String * MAX_PATH resolvedPath
        If SHGetPathFromIDListA(pfolder, _Offset(resolvedPath)) Then
            SelectFolderA = _Offset(resolvedPath)
        End If
    End If
End Function

'$INCLUDE:'unicodetoansi.bas'
